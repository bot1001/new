<?php

namespace common\models;

use yii\base\Model;
use yii\data\ActiveDataProvider;

/**
 * ProductSearch represents the model behind the search form of `common\models\Product`.
 */
class ProductSearch extends Product
{
    function attributes()
    {
        return array_merge(parent::attributes(), ['store']); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['product_id', 'store_id', 'brand_id', 'product_quantity', 'product_status'], 'integer'],
            [['product_name', 'product_subhead', 'product_taxonomy', 'product_image', 'product_introduction', 'store'], 'safe'],
            [['market_price', 'product_price'], 'number'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function scenarios()
    {
        // bypass scenarios() implementation in the parent class
        return Model::scenarios();
    }

    /**
     * Creates data provider instance with search query applied
     *
     * @param array $params
     *
     * @return ActiveDataProvider
     */
    public function search($params)
    {
        $store_id = $_SESSION['community'];

        $query = Product::find();
        $query -> joinWith('store')->where(['in', 'product_basic.store_id', $store_id]);

        // add conditions that should always apply here

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
        ]);

        $this->load($params);

        if (!$this->validate()) {
            // uncomment the following line if you do not want to return any records when validation fails
            // $query->where('0=1');
            return $dataProvider;
        }

        // grid filtering conditions
        $query->andFilterWhere([
            'product_id' => $this->product_id,
            'store_id' => $this->store_id,
            'brand_id' => $this->brand_id,
            'market_price' => $this->market_price,
            'product_price' => $this->product_price,
            'product_quantity' => $this->product_quantity,
            'product_status' => $this->product_status,
        ]);

        $query->andFilterWhere(['like', 'product_name', $this->product_name])
            ->andFilterWhere(['like', 'product_subhead', $this->product_subhead])
            ->andFilterWhere(['like', 'store_basic.store_name', $this->store])
            ->andFilterWhere(['like', 'product_taxonomy', $this->product_taxonomy])
            ->andFilterWhere(['like', 'product_image', $this->product_image])
            ->andFilterWhere(['like', 'product_introduction', $this->product_introduction]);

        $dataProvider->sort->attributes['store']=[
            'asc' => ['store_id' => SORT_ASC],
            'desc' => ['store_id' => SORT_DESC]
        ];

        return $dataProvider;
    }
}
