<?php

namespace app\models;

use Yii;
use yii\base\Model;
use yii\data\ActiveDataProvider;
use app\models\Sms;

/**
 * SmsSearch represents the model behind the search form of `app\models\Sms`.
 */
class SmsSearch extends Sms
{
    function attributes()
    {
        return array_merge(parent::attributes(), ['name']); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['id', 'count', 'creator', 'create_time', 'status'], 'integer'],
            [['sign_name', 'sms', 'property', 'name'], 'safe'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function scenarios()
    {
        // bypass scenarios() implementation in the parent class
        return Model::scenarios();
    }

    /**
     * Creates data provider instance with search query applied
     *
     * @param array $params
     *
     * @return ActiveDataProvider
     */
    public function search($params)
    {
        $query = Sms::find();
        $query->joinWith('sys');

        // add conditions that should always apply here

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'sort'=>[
                'defaultOrder' =>
                [
                    'id' => SORT_DESC
                ]
            ]
        ]);

        $this->load($params);

        if (!$this->validate()) {
            // uncomment the following line if you do not want to return any records when validation fails
            // $query->where('0=1');
            return $dataProvider;
        }

        // grid filtering conditions
        $query->andFilterWhere([
            'sms.id' => $this->id,
            'count' => $this->count,
            'sms.status' => $this->status,
            'creator' => $this->creator,
            'create_time' => $this->create_time,
        ]);

        $query->andFilterWhere(['like', 'sign_name', $this->sign_name])
            ->andFilterWhere(['like', 'sms', $this->sms])
            ->andFilterWhere(['like', 'sys_user.name', $this->name])
            ->andFilterWhere(['like', 'property', $this->property]);

        $dataProvider-> sort->attributes['name'] =
        [
            'asc' => ['name' => 'ASC'],
            'desc' => ['name' => 'DESC'],
        ];

        return $dataProvider;
    }
}
